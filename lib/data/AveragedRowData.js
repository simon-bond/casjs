// Generated by CoffeeScript 1.7.1
(function() {
  cas.AveragedRowData = (function() {
    var IN_CHANGES_SENSITIVITY, LOG_DEVIATIONS;

    LOG_DEVIATIONS = false;

    IN_CHANGES_SENSITIVITY = 1;

    function AveragedRowData() {
      this.fRows = [];
      this.fNBells = 0;
    }

    AveragedRowData.prototype.getRow = function(i) {
      return this.fRows[i];
    };

    AveragedRowData.prototype.getNRows = function() {
      return this.fRows.length;
    };

    AveragedRowData.prototype.getNBells = function() {
      return this.fNBells;
    };

    AveragedRowData.prototype.addRow = function(row, endTime, handstrokeGap, duration) {
      var avRow, count, currentInChanges, end, handstrokeRow, i, lastRow, n, prevRow, s, _i, _ref;
      if (typeof handstroke === "undefined" || handstroke === null) {
        handstrokeGap = 1.0;
      }
      if (duration == null) {
        lastRow = this.fRows.length - 1;
        duration = 0;
        if (lastRow >= 0) {
          duration = endTime - this.getRow(lastRow).getRowEndTime();
        } else if (row.getRowSize() > 1) {
          duration = row.getStrikeTime(row.getRowSize()) - row.getStrikeTime(1);
          duration = duration + Math.round((1.0 + handstrokeGap) * duration / (row.getRowSize() - 1));
        } else {
          duration = 1000;
        }
      }
      avRow = new cas.AveragedRow(row, endTime, handstrokeGap, duration);
      this.fRows.push(avRow);
      this.fNBells = Math.max(this.fNBells, avRow.getNBells());
      n = this.fRows.length;
      if (!avRow.isHandstroke()) {
        duration = avRow.getRowDuration();
        if (n > 1) {
          handstrokeRow = this.getRow(n - 2);
          duration += handstrokeRow.getRowDuration();
          handstrokeRow.setWholePullDuration(duration);
        }
        avRow.setWholePullDuration(duration);
      }
      currentInChanges = !avRow.isCloseToRounds();
      avRow.setIsInChanges(currentInChanges);
      if (n > 1) {
        prevRow = this.getRow(n - 2);
        if (currentInChanges === prevRow.isInChanges()) {
          count = prevRow.getInChangesCount() + 1;
          avRow.setInChangesCount(count);
          if (count >= IN_CHANGES_SENSITIVITY) {
            end = n - count - 2;
            this.resetInChanges(currentInChanges, end);
          }
        } else {
          avRow.setInChangesCount(0);
        }
      }
      if (LOG_DEVIATIONS) {
        s = "Row ";
        s += this.fRows.length;
        s += ":";
        for (i = _i = 1, _ref = avRow.getRowSize(); 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
          s += " ";
          s += avRow.getStrikeTime(i) - avRow.getCorrectStrikeTime(i);
        }
        return console.log(s);
      }
    };

    AveragedRowData.prototype.resetInChanges = function(currentInChanges, end) {
      var endOfPreviousSegment, i, prevCount, _i;
      if (end > 0) {
        endOfPreviousSegment = this.getRow(end);
        prevCount = endOfPreviousSegment.getInChangesCount();
        if (prevCount < IN_CHANGES_SENSITIVITY) {
          endOfPreviousSegment.setIsInChanges(currentInChanges);
          for (i = _i = 1; 1 <= prevCount ? _i <= prevCount : _i >= prevCount; i = 1 <= prevCount ? ++_i : --_i) {
            this.getRow(end - i).setIsInChanges(currentInChanges);
          }
          return this.resetInChanges(currentInChanges, end - prevCount - 1);
        } else if (currentInChanges) {
          return endOfPreviousSegment.setIsInChanges(true);
        }
      }
    };

    return AveragedRowData;

  })();

}).call(this);
