// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  cas.TouchStats = (function() {
    var BACKSTROKE, BaseRowVisitor, BellLatenessRetriever, BellMeanVisitor, BellValueVarianceRetriever, FAULTFACTOR, HANDSTROKE, HandstrokeGapRetriever, InterbellGapRetriever, MAXFAULTSPERROW, PlacedBellMeanVisitor, RowDiscreteVarianceRetriever, RowDurationRetriever, RowExistenceRetriever, RowFaultsRetriever, RowMaxVisitor, RowMeanVisitor, RowMinVisitor, RowStrikingVarianceRetriever, RowTotalVisitor, RowValueVarianceRetriever, TEXT_AV_MS_LATE, TEXT_DISCRETE_RMSE, TEXT_DISCRETE_SD, TEXT_FAULTS, TEXT_INTERVAL_MEAN, TEXT_QUICKEST_ROW, TEXT_RMSE, TEXT_ROW_LENGTH_SD, TEXT_SD, TEXT_SLOWEST_ROW, TEXT_STRIKING_RMSE, TEXT_STRIKING_SD, WHOLEPULL, WholePullDurationRetriever;

    WHOLEPULL = 0;

    HANDSTROKE = 1;

    BACKSTROKE = 2;

    MAXFAULTSPERROW = 4;

    FAULTFACTOR = 0.75;

    TEXT_STRIKING_RMSE = "Striking RMSE";

    TEXT_DISCRETE_RMSE = "Discrete RMSE";

    TEXT_STRIKING_SD = "Striking SD";

    TEXT_DISCRETE_SD = "Discrete SD";

    TEXT_INTERVAL_MEAN = "Interval mean";

    TEXT_QUICKEST_ROW = "Quickest row";

    TEXT_SLOWEST_ROW = "Slowest row";

    TEXT_ROW_LENGTH_SD = "Row length SD";

    TEXT_FAULTS = "Faults";

    TEXT_SD = "Std deviation";

    TEXT_RMSE = "RMS Error";

    TEXT_AV_MS_LATE = "Av ms late";

    function TouchStats(data, nbells) {
      this.fStatsCache = {};
      this.fData = data;
      this.fNRows = this.fData.getNRows();
      this.fNBells = nbells;
      this.getMinDuration(false);
      this.getMaxDuration(false);
    }

    TouchStats.prototype.getRow = function(i) {
      return this.fData.getRow(i);
    };

    TouchStats.prototype.getNRows = function() {
      return this.fNRows;
    };

    TouchStats.prototype.getNBells = function() {
      return this.fNBells;
    };

    TouchStats.prototype.outputStats = function(out, inChangesOnly) {
      var i, _i, _ref, _results;
      out("Touch stats calculated from " + this.getNRows() + " rows");
      out("Faults: " + this.getFaults(inChangesOnly) + ", " + this.getFaultPercentage(inChangesOnly) + "%");
      out("Metric, whole, hand, back");
      this._outThree(out, TEXT_STRIKING_RMSE, this.getStrikingRMSE(inChangesOnly));
      this._outThree(out, TEXT_DISCRETE_RMSE, this.getDiscreteStrikingRMSE(inChangesOnly));
      this._outThree(out, TEXT_INTERVAL_MEAN, this.getMeanInterbellGap(inChangesOnly));
      this._outThree(out, TEXT_QUICKEST_ROW, this.getMinDuration(inChangesOnly));
      this._outThree(out, TEXT_SLOWEST_ROW, this.getMaxDuration(inChangesOnly));
      this._outThree(out, TEXT_ROW_LENGTH_SD, this.getRowLengthSD(inChangesOnly));
      _results = [];
      for (i = _i = 1, _ref = this.getNBells(); 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
        out("Bell " + i);
        this._outThree(out, TEXT_SD, this.getBellSD(i, inChangesOnly));
        this._outThree(out, TEXT_RMSE, this.getBellRMSE(i, inChangesOnly));
        _results.push(this._outThree(out, TEXT_AV_MS_LATE, this.getLateness(i, inChangesOnly)));
      }
      return _results;
    };

    TouchStats.prototype._outThree = function(out, text, stats) {
      return out(text + ", " + stats.whole + ", " + stats.hand + ", " + stats.back);
    };

    TouchStats.prototype.visitRows = function(visitor, stroke, inChanges) {
      var i, row, rowWorthVisiting, step, _results;
      if (this.fNRows === 0) {
        return;
      }
      i = 0;
      step = 2;
      if (stroke === WHOLEPULL) {
        step = 1;
      } else if (stroke === HANDSTROKE && !this.getRow(0).isHandstroke()) {
        i++;
      } else if (stroke === BACKSTROKE && this.getRow(0).isHandstroke()) {
        i++;
      }
      _results = [];
      while (i < this.fNRows) {
        row = this.getRow(i);
        if (row == null) {
          console.log("Null Row in visitRows = " + i + " out of " + this.fNRows);
        } else {
          rowWorthVisiting = true;
          if (inChanges && !row.isInChanges()) {
            rowWorthVisiting = false;
          }
          if (rowWorthVisiting) {
            visitor.visit(row);
          }
        }
        _results.push(i += step);
      }
      return _results;
    };

    TouchStats.prototype.cachedVisitRows = function(visitor, stroke, inChanges, cacheKey) {
      var cacheValue;
      cacheKey = cacheKey + "/" + stroke + "/" + inChanges;
      cacheValue = this.fStatsCache[cacheKey];
      if (cacheValue == null) {
        this.visitRows(visitor, stroke, inChanges);
        cacheValue = visitor.getResult();
        this.fStatsCache[cacheKey] = cacheValue;
      }
      return cacheValue;
    };

    TouchStats.prototype.getFaults = function(inChanges, faultFactor) {
      if (faultFactor == null) {
        faultFactor = FAULTFACTOR;
      }
      return this.cachedVisitRows(new RowTotalVisitor(new RowFaultsRetriever(faultFactor)), WHOLEPULL, inChanges, "Faults");
    };

    TouchStats.prototype.getFaultPercentage = function(inChanges) {
      var max, nrows;
      nrows = this.cachedVisitRows(new RowTotalVisitor(new RowExistenceRetriever()), WHOLEPULL, inChanges, "NRows");
      max = nrows * MAXFAULTSPERROW;
      return (max - this.getFaults(inChanges)) / max;
    };

    TouchStats.prototype.getMinDuration = function(inChanges) {
      var ret;
      ret = {
        hand: this._getMinDuration(HANDSTROKE, inChanges),
        back: this._getMinDuration(BACKSTROKE, inChanges),
        whole: this._getMinDuration(WHOLEPULL, inChanges)
      };
      return ret;
    };

    TouchStats.prototype._getMinDuration = function(stroke, inChanges) {
      var cacheKey, v;
      v = null;
      cacheKey = "MinDuration";
      if (stroke === WHOLEPULL) {
        v = new RowMinVisitor(new WholePullDurationRetriever());
        stroke = BACKSTROKE;
        cacheKey += "Whole";
      } else {
        v = new RowMinVisitor(new RowDurationRetriever());
      }
      return this.cachedVisitRows(v, stroke, inChanges, cacheKey);
    };

    TouchStats.prototype.getMaxDuration = function(inChanges) {
      var ret;
      ret = {
        hand: this._getMaxDuration(HANDSTROKE, inChanges),
        back: this._getMaxDuration(BACKSTROKE, inChanges),
        whole: this._getMaxDuration(WHOLEPULL, inChanges)
      };
      return ret;
    };

    TouchStats.prototype._getMaxDuration = function(stroke, inChanges) {
      var cacheKey, v;
      v = null;
      cacheKey = "MaxDuration";
      if (stroke === WHOLEPULL) {
        v = new RowMaxVisitor(new WholePullDurationRetriever());
        stroke = BACKSTROKE;
        cacheKey += "Whole";
      } else {
        v = new RowMaxVisitor(new RowDurationRetriever());
      }
      return this.cachedVisitRows(v, stroke, inChanges, cacheKey);
    };

    TouchStats.prototype.getMeanInterbellGap = function(inChanges) {
      var ret;
      ret = {
        hand: this._getMeanInterbellGap(HANDSTROKE, inChanges),
        back: this._getMeanInterbellGap(BACKSTROKE, inChanges),
        whole: this._getMeanInterbellGap(WHOLEPULL, inChanges)
      };
      return ret;
    };

    TouchStats.prototype._getMeanInterbellGap = function(stroke, inChanges) {
      return this.cachedVisitRows(new RowMeanVisitor(new InterbellGapRetriever()), stroke, inChanges, "MeanInterbellGap");
    };

    TouchStats.prototype.getRowLengthSD = function(inChanges) {
      var ret;
      ret = {
        hand: this._getRowLengthSD(HANDSTROKE, inChanges),
        back: this._getRowLengthSD(BACKSTROKE, inChanges),
        whole: this._getRowLengthSD(WHOLEPULL, inChanges)
      };
      return ret;
    };

    TouchStats.prototype._getRowLengthSD = function(stroke, inChanges) {
      var rowLengthMean, v;
      rowLengthMean = this._getMeanRowLength(stroke, inChanges);
      v = new RowMeanVisitor(new RowValueVarianceRetriever(new RowDurationRetriever(), rowLengthMean));
      return Math.sqrt(this.cachedVisitRows(v, stroke, inChanges, "RowLengthSD"));
    };

    TouchStats.prototype.getMeanRowLength = function(inChanges) {
      var ret;
      ret = {
        hand: this._getMeanRowLength(HANDSTROKE, inChanges),
        back: this._getMeanRowLength(BACKSTROKE, inChanges),
        whole: this._getMeanRowLength(WHOLEPULL, inChanges)
      };
      return ret;
    };

    TouchStats.prototype._getMeanRowLength = function(stroke, inChanges) {
      return this.cachedVisitRows(new RowMeanVisitor(new RowDurationRetriever()), stroke, inChanges, "MeanRowLength");
    };

    TouchStats.prototype.getDiscreteStrikingRMSE = function(inChanges) {
      var ret;
      ret = {
        hand: this._getDiscreteStrikingRMSE(HANDSTROKE, inChanges),
        back: this._getDiscreteStrikingRMSE(BACKSTROKE, inChanges),
        whole: this._getDiscreteStrikingRMSE(WHOLEPULL, inChanges)
      };
      return ret;
    };

    TouchStats.prototype._getDiscreteStrikingRMSE = function(stroke, inChanges) {
      return Math.sqrt(this.cachedVisitRows(new RowMeanVisitor(new RowDiscreteVarianceRetriever()), stroke, inChanges, "DiscreteRMSE"));
    };

    TouchStats.prototype.getStrikingRMSE = function(inChanges) {
      var ret;
      ret = {
        hand: this._getStrikingRMSE(HANDSTROKE, inChanges),
        back: this._getStrikingRMSE(BACKSTROKE, inChanges),
        whole: this._getStrikingRMSE(WHOLEPULL, inChanges)
      };
      return ret;
    };

    TouchStats.prototype._getStrikingRMSE = function(stroke, inChanges) {
      return Math.sqrt(this.cachedVisitRows(new RowMeanVisitor(new RowStrikingVarianceRetriever()), stroke, inChanges, "StrikingRMSE"));
    };

    TouchStats.prototype.getBellSD = function(bell, inChanges) {
      var ret;
      ret = {
        hand: this._getBellSD(bell, HANDSTROKE, inChanges),
        back: this._getBellSD(bell, BACKSTROKE, inChanges),
        whole: this._getBellSD(bell, WHOLEPULL, inChanges)
      };
      return ret;
    };

    TouchStats.prototype._getBellSD = function(bell, stroke, inChanges) {
      var meanLateness, v;
      meanLateness = this._getLateness(bell, stroke, inChanges);
      v = new BellMeanVisitor(new BellValueVarianceRetriever(new BellLatenessRetriever(), meanLateness), bell);
      return Math.sqrt(this.cachedVisitRows(v, stroke, inChanges, "BellSD" + bell));
    };

    TouchStats.prototype.getBellRMSE = function(bell, inChanges) {
      var ret;
      ret = {
        hand: this._getBellRMSE(bell, HANDSTROKE, inChanges),
        back: this._getBellRMSE(bell, BACKSTROKE, inChanges),
        whole: this._getBellRMSE(bell, WHOLEPULL, inChanges)
      };
      return ret;
    };

    TouchStats.prototype._getBellRMSE = function(bell, stroke, inChanges) {
      var v;
      v = new BellMeanVisitor(new BellValueVarianceRetriever(new BellLatenessRetriever(), 0), bell);
      return Math.sqrt(this.cachedVisitRows(v, stroke, inChanges, "BellRMSE" + bell));
    };

    TouchStats.prototype.getLateness = function(bell, inChanges) {
      var ret;
      ret = {
        hand: this._getLateness(bell, HANDSTROKE, inChanges),
        back: this._getLateness(bell, BACKSTROKE, inChanges),
        whole: this._getLateness(bell, WHOLEPULL, inChanges)
      };
      return ret;
    };

    TouchStats.prototype._getLateness = function(bell, stroke, inChanges) {
      return this.cachedVisitRows(new BellMeanVisitor(new BellLatenessRetriever(), bell), stroke, inChanges, "BellLateness" + bell);
    };

    TouchStats.prototype.getMeanHandstrokeGap = function(inChanges) {
      return this.cachedVisitRows(new RowMeanVisitor(new HandstrokeGapRetriever()), HANDSTROKE, inChanges, "MeanHandstrokeGap");
    };

    TouchStats.prototype.getHandstrokeGapSD = function(inChanges) {
      var hgMean, v;
      hgMean = this.getMeanHandstrokeGap(inChanges);
      v = new RowMeanVisitor(new RowValueVarianceRetriever(new HandstrokeGapRetriever(), hgMean));
      return Math.sqrt(this.cachedVisitRows(v, HANDSTROKE, inChanges, "HandstrokeGapSD"));
    };

    TouchStats.prototype.getMeanBellHandstrokeGap = function(bell, inChanges) {
      return this.cachedVisitRows(new PlacedBellMeanVisitor(new HandstrokeGapRetriever(), bell, 1), HANDSTROKE, inChanges, "MeanBellHandstrokeGap" + bell);
    };

    TouchStats.prototype.getBellHandstrokeGapSD = function(bell, inChanges) {
      var hgMean, v;
      hgMean = this.getMeanBellHandstrokeGap(bell, inChanges);
      v = new PlacedBellMeanVisitor(new RowValueVarianceRetriever(new HandstrokeGapRetriever(), hgMean), bell, 1);
      return Math.sqrt(this.cachedVisitRows(v, HANDSTROKE, inChanges, "BellHandstrokeGapSD" + bell));
    };

    BaseRowVisitor = (function() {
      function BaseRowVisitor() {}

      BaseRowVisitor.prototype.d = 0;

      BaseRowVisitor.prototype.getResult = function() {
        return this.d;
      };

      return BaseRowVisitor;

    })();

    RowTotalVisitor = (function(_super) {
      __extends(RowTotalVisitor, _super);

      function RowTotalVisitor(r) {
        this.retriever = r;
      }

      RowTotalVisitor.prototype.visit = function(row) {
        return this.d += this.retriever.getValue(row);
      };

      return RowTotalVisitor;

    })(BaseRowVisitor);

    RowMeanVisitor = (function(_super) {
      __extends(RowMeanVisitor, _super);

      function RowMeanVisitor(r) {
        this.retriever = r;
        this.c = 0;
      }

      RowMeanVisitor.prototype.visit = function(row) {
        this.d += this.retriever.getValue(row);
        return this.c++;
      };

      RowMeanVisitor.prototype.getResult = function() {
        if (this.c > 0) {
          this.d = this.d / this.c;
        }
        return this.d;
      };

      return RowMeanVisitor;

    })(BaseRowVisitor);

    BellMeanVisitor = (function(_super) {
      __extends(BellMeanVisitor, _super);

      function BellMeanVisitor(r, b) {
        this.retriever = r;
        this.bell = b;
        this.c = 0;
      }

      BellMeanVisitor.prototype.visit = function(row) {
        var place;
        place = row.findBell(this.bell);
        if (place > 0) {
          this.d += this.retriever.getValue(row, place);
          return this.c++;
        }
      };

      BellMeanVisitor.prototype.getResult = function() {
        if (this.c > 0) {
          this.d = this.d / this.c;
        }
        return this.d;
      };

      return BellMeanVisitor;

    })(BaseRowVisitor);

    PlacedBellMeanVisitor = (function(_super) {
      __extends(PlacedBellMeanVisitor, _super);

      function PlacedBellMeanVisitor(r, b, p) {
        PlacedBellMeanVisitor.__super__.constructor.call(this, r, b);
        this.place = p;
      }

      PlacedBellMeanVisitor.prototype.visit = function(row) {
        var p;
        p = row.findBell(this.bell);
        if (p > 0 && p === this.place) {
          this.d += this.retriever.getValue(row, this.place);
          return this.c++;
        }
      };

      return PlacedBellMeanVisitor;

    })(BellMeanVisitor);

    RowMaxVisitor = (function(_super) {
      __extends(RowMaxVisitor, _super);

      function RowMaxVisitor(r) {
        this.retriever = r;
      }

      RowMaxVisitor.prototype.visit = function(row) {
        return this.d = Math.max(this.d, this.retriever.getValue(row));
      };

      return RowMaxVisitor;

    })(BaseRowVisitor);

    RowMinVisitor = (function(_super) {
      __extends(RowMinVisitor, _super);

      function RowMinVisitor(r) {
        this.retriever = r;
        this.d = Number.MAX_VALUE;
      }

      RowMinVisitor.prototype.visit = function(row) {
        return this.d = Math.min(this.d, this.retriever.getValue(row));
      };

      return RowMinVisitor;

    })(BaseRowVisitor);

    RowExistenceRetriever = (function() {
      function RowExistenceRetriever() {}

      RowExistenceRetriever.prototype.getValue = function(row) {
        return 1;
      };

      return RowExistenceRetriever;

    })();

    RowFaultsRetriever = (function() {
      function RowFaultsRetriever(ff) {
        this.faultFactor = ff;
        this.t = 0;
      }

      RowFaultsRetriever.prototype.getValue = function(row) {
        var d, i, maxGoodGap, nfaults;
        nfaults = 0;
        maxGoodGap = this.faultFactor * row.getMeanInterbellGap();
        i = 1;
        if (row.isHandstroke()) {
          this.t = row.getBong(i++).time;
        }
        while (i <= row.getRowSize()) {
          d = row.getBong(i++).time;
          if (Math.abs(d - this.t) < maxGoodGap) {
            nfaults++;
          }
          this.t = d;
        }
        if (nfaults > MAXFAULTSPERROW) {
          nfaults = MAXFAULTSPERROW;
        }
        return nfaults;
      };

      return RowFaultsRetriever;

    })();

    RowValueVarianceRetriever = (function() {
      function RowValueVarianceRetriever(r, m) {
        this.delegate = r;
        this.mean = m;
      }

      RowValueVarianceRetriever.prototype.getValue = function(row) {
        var x;
        x = this.delegate.getValue(row) - this.mean;
        return x * x;
      };

      return RowValueVarianceRetriever;

    })();

    BellValueVarianceRetriever = (function() {
      function BellValueVarianceRetriever(r, m) {
        this.delegate = r;
        this.mean = m;
      }

      BellValueVarianceRetriever.prototype.getValue = function(row, place) {
        var x;
        x = this.delegate.getValue(row, place) - this.mean;
        return x * x;
      };

      return BellValueVarianceRetriever;

    })();

    BellLatenessRetriever = (function() {
      function BellLatenessRetriever() {}

      BellLatenessRetriever.prototype.getValue = function(row, place) {
        return row.getLatenessMilliseconds(place);
      };

      return BellLatenessRetriever;

    })();

    RowStrikingVarianceRetriever = (function() {
      function RowStrikingVarianceRetriever() {}

      RowStrikingVarianceRetriever.prototype.getValue = function(row) {
        return row.getVariance();
      };

      return RowStrikingVarianceRetriever;

    })();

    RowDiscreteVarianceRetriever = (function() {
      function RowDiscreteVarianceRetriever() {}

      RowDiscreteVarianceRetriever.prototype.getValue = function(row) {
        return row.getDiscreteVariance();
      };

      return RowDiscreteVarianceRetriever;

    })();

    RowDurationRetriever = (function() {
      function RowDurationRetriever() {}

      RowDurationRetriever.prototype.getValue = function(row) {
        return row.getRowDuration();
      };

      return RowDurationRetriever;

    })();

    WholePullDurationRetriever = (function() {
      function WholePullDurationRetriever() {}

      WholePullDurationRetriever.prototype.getValue = function(row) {
        return row.getWholePullDuration();
      };

      return WholePullDurationRetriever;

    })();

    InterbellGapRetriever = (function() {
      function InterbellGapRetriever() {}

      InterbellGapRetriever.prototype.getValue = function(row) {
        return row.getMeanInterbellGap();
      };

      return InterbellGapRetriever;

    })();

    HandstrokeGapRetriever = (function() {
      function HandstrokeGapRetriever() {}

      HandstrokeGapRetriever.prototype.getValue = function(row) {
        return row.getHandstrokeGapMs();
      };

      return HandstrokeGapRetriever;

    })();

    return TouchStats;

  })();

}).call(this);
