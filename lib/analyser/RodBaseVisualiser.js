// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  cas.RodBaseVisualiser = (function(_super) {
    __extends(RodBaseVisualiser, _super);

    function RodBaseVisualiser(name, info) {
      RodBaseVisualiser.__super__.constructor.call(this, name, info);
      this.fNWholePulls = 3;
      this.fRodRows = new Array(this.fNWholePulls * 2);
    }

    RodBaseVisualiser.prototype.clearData = function() {
      RodBaseVisualiser.__super__.clearData.apply(this, arguments);
      this.fFillPoint = 0;
      this.fEmptyPoint = 0;
      return this.fCurrentInterBellGap = 0.0;
    };

    RodBaseVisualiser.prototype.newRow = function(row) {
      var avWholePullLength, n, _i, _ref;
      this.fRodRows[this.fFillPoint++] = row;
      if (this.fFillPoint === this.fRodRows.length) {
        avWholePullLength = (this.calcWholePullMidpoint(this.fRodRows.length - 2) - this.calcWholePullMidpoint(0)) / (this.fRodRows.length / 2 - 1);
        this.fCurrentInterBellGap = avWholePullLength / (this.getCurrentHandstrokeGap() + 2 * this.getNBells());
        while (this.fEmptyPoint <= (this.fRodRows.length / 4) * 2) {
          this.addWholePullRows(this.fCurrentInterBellGap);
          this.fEmptyPoint += 2;
        }
        this.fEmptyPoint -= 2;
        for (n = _i = 0, _ref = this.fRodRows.length - 2; 0 <= _ref ? _i < _ref : _i > _ref; n = 0 <= _ref ? ++_i : --_i) {
          this.fRodRows[n] = this.fRodRows[n + 2];
        }
        return this.fFillPoint -= 2;
      }
    };

    RodBaseVisualiser.prototype.notifyLastRowRung = function() {
      while (this.fEmptyPoint < this.fFillPoint) {
        this.addWholePullRows(this.fCurrentInterBellGap);
        this.fEmptyPoint += 2;
      }
      return RodBaseVisualiser.__super__.notifyLastRowRung.apply(this, arguments);
    };

    RodBaseVisualiser.prototype.addWholePullRows = function(interbellGap) {
      var duration, nbells, rowEndTime;
      nbells = this.getNBells();
      rowEndTime = Math.round(this.calcWholePullMidpoint(this.fEmptyPoint) - 0.5 * interbellGap);
      duration = Math.round(interbellGap * this.fRodRows[this.fEmptyPoint].getNBells());
      if (this.fRodRows[this.fEmptyPoint].isHandstroke()) {
        duration += this.getCurrentHandstrokeGap() * interbellGap;
      }
      this.addAveragedRow(this.fRodRows[this.fEmptyPoint], rowEndTime, this.getCurrentHandstrokeGap(), duration);
      rowEndTime += nbells * interbellGap;
      duration = Math.round(interbellGap * this.fRodRows[this.fEmptyPoint + 1].getNBells());
      if (this.fRodRows[this.fEmptyPoint + 1].isHandstroke()) {
        duration += this.getCurrentHandstrokeGap() * interbellGap;
      }
      return this.addAveragedRow(this.fRodRows[this.fEmptyPoint + 1], rowEndTime, this.getCurrentHandstrokeGap(), duration);
    };

    RodBaseVisualiser.prototype.calcWholePullMidpoint = function(row) {
      var c, i, ms, _i, _j, _ref, _ref1;
      c = 0;
      ms = 0;
      for (i = _i = 0, _ref = this.fRodRows[row].getRowSize(); 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        ms += this.fRodRows[row].getBong(i + 1).time;
        c++;
      }
      for (i = _j = 0, _ref1 = this.fRodRows[row + 1].getRowSize(); 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
        ms += this.fRodRows[row + 1].getBong(i + 1).time;
        c++;
      }
      return ms / c;
    };

    return RodBaseVisualiser;

  })(cas.VisualiserHelper);

}).call(this);
