// Generated by CoffeeScript 1.7.1
(function() {
  cas.StrikingDisplay = (function() {
    var BACKGROUND_BACK, BACKGROUND_BACKBAD, BACKGROUND_BACKGOOD, BACKGROUND_HAND, BACKGROUND_HANDBAD, BACKGROUND_HANDGOOD, BLACK, CORRECT_LINE_COLOUR, EXTRA_WIDTH, GRID_COLOUR, LIGHT_GREY, MIN_ZOOM_TO_SHOW_BELLS, ROW_WIDTH, SPEED_WIDTH;

    StrikingDisplay.prototype.fZoomX = 1.0;

    StrikingDisplay.prototype.fZoomY = 1.0;

    StrikingDisplay.prototype.fZoomFont = 1.0;

    StrikingDisplay.prototype.fWidthPerBell = 100;

    StrikingDisplay.prototype.fHeightPerRow = 20;

    StrikingDisplay.prototype.fAdvancedView = false;

    StrikingDisplay.prototype.fRowsLoaded = false;

    StrikingDisplay.prototype.fNowPlayingBell = -1;

    EXTRA_WIDTH = 150;

    ROW_WIDTH = 300;

    SPEED_WIDTH = 200;

    CORRECT_LINE_COLOUR = 'rgb(0,150,255)';

    GRID_COLOUR = 'rgb(150,150,150)';

    LIGHT_GREY = 'rgb(200,200,200)';

    BLACK = 'rgb(0,0,0)';

    MIN_ZOOM_TO_SHOW_BELLS = 0.3;

    BACKGROUND_HAND = 'rgb(242,242,242)';

    BACKGROUND_BACK = 'rgb(230,230,230)';

    BACKGROUND_HANDBAD = 'rgb(245,220,220)';

    BACKGROUND_BACKBAD = 'rgb(230,207,207)';

    BACKGROUND_HANDGOOD = 'rgb(230,245,230)';

    BACKGROUND_BACKGOOD = 'rgb(216,230,216)';

    function StrikingDisplay() {
      var canvas;
      canvas = document.getElementById('canvas');
      this.ctx = canvas.getContext('2d');
    }

    StrikingDisplay.prototype.setZoom = function(zoom) {
      this.fZoomFont = Math.pow(zoom, 0.4);
      this.fZoomX = Math.pow(zoom, 0.2);
      this.fZoomY = zoom;
      if (this.fData == null) {
        this.fWidthPerBell = zoomX(100);
      } else {
        this.fWidthPerBell = Math.round(this.fZoomX * this.getTotalWidth() / this.fData.getNBells());
      }
      this.fHeightPerRow = this.zoomY(20);
      this.setupFonts();
      this.revalidate();
      return this.repaint();
    };

    StrikingDisplay.prototype.zoomX = function(d) {
      return Math.round(d * this.fZoomX);
    };

    StrikingDisplay.prototype.zoomY = function(d) {
      return Math.round(d * this.fZoomY);
    };

    StrikingDisplay.prototype.setAutoScroll = function(autoscroll) {
      return this.fAutoScroll = autoscroll;
    };

    StrikingDisplay.prototype.storePreviousScrollPosition = function() {
      return this.fPreviousScrollPosition = this.getVisibleRect();
    };

    StrikingDisplay.prototype.scrollToPreviousPosition = function() {};

    StrikingDisplay.prototype.doLoadRows = function(data) {
      this.fWidthPerBell = Math.round(this.fZoomX * this.getTotalWidth() / data.getNBells());
      this.fData = data;
      this.fRowsLoaded = true;
      return this.paintComponent();
    };

    StrikingDisplay.prototype.setAdvancedView = function(advancedView) {
      if (this.fAdvancedView !== advancedView) {
        this.fAdvancedView = advancedView;
        return this.updateDisplay();
      }
    };

    StrikingDisplay.prototype.getHighlightedBell = function() {
      return this.fHighlightedBell;
    };

    StrikingDisplay.prototype.setHighlightedBell = function(highlightedBell) {
      this.fHighlightedBell = highlightedBell;
      return this.repaint();
    };

    StrikingDisplay.prototype.setPlayingRow = function(row) {
      if (row !== this.fNowPlayingRow) {
        if (this.fNowPlayingRow >= 0) {
          repaintRow(this.fNowPlayingRow);
        }
        this.fNowPlayingRow = row;
        if (fNowPlayingRow >= 0) {
          this.repaintRow(this.fNowPlayingRow);
          if (this.fAutoScroll) {
            return this.scrollToRow(this.fNowPlayingRow);
          }
        }
      }
    };

    StrikingDisplay.prototype.setPlayingBell = function(bell) {
      this.fNowPlayingBell = bell;
      if (this.fNowPlayingRow >= 0) {
        return this.repaintRow(this.fNowPlayingRow);
      }
    };

    StrikingDisplay.prototype.getTotalWidth = function() {
      return this.zoomX(ROW_WIDTH);
    };

    StrikingDisplay.prototype.repaintRow = function(row) {
      var y;
      if (!this.measureUp()) {
        return;
      }
      y = this.getTopYFromRowNumber(row);
      return this.repaint(fInsets.left, y, fRowRight + 1000, fHeightPerRow * 2);
    };

    StrikingDisplay.prototype.getRowNumberFromYOrdinate = function(y) {
      return (y + this.fHeightPerRow - this.fY0) / this.fHeightPerRow;
    };

    StrikingDisplay.prototype.getTopYFromRowNumber = function(rowNumber) {
      return this.fY0 + (rowNumber - 1) * this.fHeightPerRow;
    };

    StrikingDisplay.prototype.scrollToRow = function(row) {
      var y;
      if (!this.measureUp()) {
        return;
      }
      return y = this.getTopYFromRowNumber(row);
    };

    StrikingDisplay.prototype.measureUp = function() {
      var maxDuration, minDuration;
      if (!this.fRowsLoaded) {
        return false;
      }
      this.fInsets = this.getInsets();
      if (this.fNormalBellFont == null) {
        setupFonts();
      }
      minDuration = this.fData.getMinDuration(false);
      maxDuration = this.fData.getMaxDuration(false);
      this.fAvBackDuration = (minDuration.back + maxDuration.back) / 2;
      this.fMinDur = Math.min(minDuration.hand, minDuration.back);
      this.fMaxMinusMinDur = Math.max(1, Math.max(maxDuration.hand, maxDuration.back) - this.fMinDur);
      this.fPixelsPerMs = (this.fWidthPerBell * this.fData.getNBells() * this.fZoomX) / this.fAvBackDuration;
      this.fY0 = 20 + this.fHeightPerRow + this.fInsets.top;
      this.fRowRight = this.fWidthPerBell * 2 + this.fInsets.left + this.fWidthPerBell * fData.getNBells();
      return true;
    };

    StrikingDisplay.prototype.setupFonts = function() {
      var z;
      this.fTitleFont = '12px bold Arial';
      z = Math.max(0.75, this.fZoomX);
      this.fNormalAdvancedViewFont = "" + (Math.round(12 * z)) + "px Arial";
      this.fNormalAdvancedViewFont = "" + (Math.round(10 * z)) + "px Arial";
      this.fNormalBellFont = "" + (Math.round(12 * this.fZoomFont)) + "px Arial";
      this.fBoldBellFont = "" + (Math.round(12 * this.fZoomFont)) + "px bold Arial";
      return this.fBigBellFont = "" + (Math.round(16 * this.fZoomFont)) + "px Arial";
    };

    StrikingDisplay.prototype.paintComponent = function() {
      var firstRow, i, r, y, _i, _j, _k, _ref, _ref1, _ref2, _results;
      if (!this.measureUp()) {
        return;
      }
      for (i = _i = 0, _ref = this.fData.getNBells(); 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        this.fLastActualX[i] = -1;
        this.fLastCorrectX[i] = -1;
      }
      this.fInChanges = false;
      this.ctx.setFont(fNormalBellFont);
      this.ctx.setColor('rgb(0,0,0)');
      firstRow = 0;
      y = this.fY0 + firstRow * this.fHeightPerRow;
      for (i = _j = firstRow, _ref1 = this.fData.getNRows(); firstRow <= _ref1 ? _j < _ref1 : _j > _ref1; i = firstRow <= _ref1 ? ++_j : --_j) {
        r = this.fData.getRow(i);
        if (r != null) {
          this.calcEffectivePixelsPerMs(r);
          this.fRowLeft = this.fRowRight - Math.round(r.getRowDuration() * this.fEffectivePixelsPerMs);
          this.fInterbellGap = Math.round(r.getAveragedGap() * this.fEffectivePixelsPerMs);
          this.drawRowBackground(y, r, i, i > 0 ? this.fData.getRow(i - 1) : null);
          this.annotateRows(y, r, i);
          this.drawLines(y, r);
        }
        y += this.fHeightPerRow;
      }
      y = this.fY0 + firstRow * this.fHeightPerRow;
      _results = [];
      for (i = _k = firstRow, _ref2 = this.fData.getNRows(); firstRow <= _ref2 ? _k < _ref2 : _k > _ref2; i = firstRow <= _ref2 ? ++_k : --_k) {
        r = this.fData.getRow(i);
        if (r != null) {
          this.calcEffectivePixelsPerMs(r);
          this.drawBellNumbers(y, r, i);
        }
        _results.push(y += this.fHeightPerRow);
      }
      return _results;
    };

    StrikingDisplay.prototype.drawRowBackground = function(y, row, rowNumber, prevRow) {
      var delta, depress, durPixels, h, rowBackground, rowStart, _ref;
      durPixels = Math.round((SPEED_WIDTH * this.fZoomX * (row.getRowDuration() - this.fMinDur)) / this.fMaxMinusMinDur);
      rowBackground = this.getRowColour(row, rowNumber);
      depress = (_ref = rowNumber === this.fPlaybackStartRow) != null ? _ref : {
        1: 0
      };
      this.paintRectangle(this.fRowRight + this.fInterbellGap + zoomX(10), y - this.fHeightPerRow, durPixels, this.fHeightPerRow, rowBackground, depress);
      this.paintRectangle(this.fRowLeft + this.fInterbellGap, y - this.fHeightPerRow, this.fRowRight - this.fRowLeft, this.fHeightPerRow, rowBackground, depress);
      if (prevRow != null) {
        rowStart = row.getRowEndTime() - row.getRowDuration();
        delta = rowStart - prevRow.getRowEndTime();
        if (delta !== 0) {
          h = Math.round(this.fHeightPerRow * 0.25);
          delta *= this.fEffectivePixelsPerMs;
          if (delta > 0) {
            return this.paintRectangle(this.fRowLeft + this.fInterbellGap - delta, y - (h + this.fHeightPerRow) / 2, delta, h, rowBackground, depress * 2);
          } else {
            return this.paintRectangle(this.fRowLeft + this.fInterbellGap, y - (h + this.fHeightPerRow) / 2, -delta, h, this.getBackground(), -depress);
          }
        }
      }
    };

    StrikingDisplay.prototype.paintRectangle = function(x, y, width, height, c, depressedBorder) {
      this.ctx.setColor(c);
      if (depressedBorder === 0) {
        return this.ctx.fillRect(x, y, width, height);
      } else if (depressedBorder > 0) {
        ct6w.fillRect(x, y, width + 1, height);
        if (depressedBorder === 2) {
          width--;
        }
        this.ctx.setColor('rgb(255,255,255)');
        this.ctx.drawLine(x, y + height - 1, x + width, y + height - 1);
        this.ctx.drawLine(x, y + height - 2, x + width, y + height - 2);
        if (depressedBorder < 2) {
          this.ctx.drawLine(x + width, y, x + width, y + height - 1);
          this.ctx.drawLine(x + width - 1, y, x + width - 1, y + height - 1);
        }
        this.ctx.setColor('rgb(200,200,200)');
        if (depressedBorder === 2) {
          width++;
        }
        ctw.drawLine(x, y, x + width, y);
        return this.ctx.drawLine(x, y, x, y + height - 1);
      } else if (depressedBorder < 0) {
        width += 2;
        height += 2;
        this.ctx.fillRect(x, y, width, height);
        y--;
        this.ctx.setColor('rgb(255,255,255)');
        this.ctx.drawLine(x, y, x + width, y);
        this.ctx.drawLine(x, y + 1, x + width, y + 1);
        this.ctx.setColor('rgb(200,200,200)');
        this.ctx.drawLine(x, y + height, x + width, y + height);
        return this.ctx.drawLine(x + width, y, x + width, y + height);
      }
    };

    StrikingDisplay.prototype.annotateRows = function(y, row, i) {
      this.ctx.setColor('rgb(0,0,0)');
      this.ctx.setFont(this.fNormalAdvancedViewFont);
      if (!row.isHandstroke()) {
        if (i % 10 === 9 || this.fZoomY > MIN_ZOOM_TO_SHOW_BELLS) {
          this.ctx.fillString("" + (i + 1), this.fInsets.left, y);
        }
      }
      return this.ctx.setFont(this.fNormalBellFont);
    };

    StrikingDisplay.prototype.drawLines = function(y, row) {
      var b, j, _i, _j, _ref, _ref1, _results;
      for (j = _i = 0, _ref = row.getRowSize(); 0 <= _ref ? _i < _ref : _i > _ref; j = 0 <= _ref ? ++_i : --_i) {
        this.fThisActualX[j] = this.strikeTimeToPixelX(row, row.getStrikeTime(j + 1));
        this.fThisCorrectX[j] = this.strikeTimeToPixelX(row, row.getCorrectStrikeTime(j + 1));
        b = row.getBellAt(j + 1);
        if (this.fLastActualX[j] > 0) {
          if ((j & 1) === 1) {
            this.ctx.setColor(LIGHT_GREY);
            this.ctx.drawLine(this.fLastCorrectX[j], y - this.fHeightPerRow * 3 / 2, this.fThisCorrectX[j], y - this.fHeightPerRow / 2);
          }
          if (!this.fInChangesOnly || this.fInChanges) {
            if (b === this.fHighlightedBell) {
              this.ctx.setColor(CORRECT_LINE_COLOUR);
              this.ctx.drawLine(this.fLastCorrectX[this.fLastPlace[b - 1]], y - this.fHeightPerRow * 3 / 2, this.fThisCorrectX[j], y - this.fHeightPerRow / 2);
              this.ctx.setColor(BLACK);
            } else {
              this.ctx.setColor(GRID_COLOUR);
            }
            this.ctx.drawLine(this.fLastActualX[this.fLastPlace[b - 1]], y - this.fHeightPerRow * 3 / 2, this.fThisActualX[j], y - this.fHeightPerRow / 2);
          }
        }
      }
      this.fInChanges = row.isInChanges();
      _results = [];
      for (j = _j = 0, _ref1 = row.getRowSize(); 0 <= _ref1 ? _j < _ref1 : _j > _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
        b = row.getBellAt(j + 1);
        this.fLastPlace[b - 1] = j;
        this.fLastActualX[j] = this.fThisActualX[j];
        _results.push(this.fLastCorrectX[j] = this.fThisCorrectX[j]);
      }
      return _results;
    };

    StrikingDisplay.prototype.drawBellNumbers = function(y, row, rowNumber) {
      var b, j, s, x, xOff, _i, _ref, _results;
      y -= this.zoomY(5);
      xOff = -this.fCharWidth;
      if (rowNumber === this.fPlaybackStartRow) {
        y++;
        xOff++;
      }
      _results = [];
      for (j = _i = 0, _ref = row.getRowSize(); 0 <= _ref ? _i < _ref : _i > _ref; j = 0 <= _ref ? ++_i : --_i) {
        b = row.getBellAt(j + 1);
        x = strikeTimeToPixelX(row, row.getStrikeTime(j + 1));
        s = cas.BELL_CHARS.substring(b - 1, b);
        this.ctx.setColor(BLACK);
        if (rowNumber === this.fNowPlayingRow && b === this.fNowPlayingBell) {
          this.ctx.setFont(this.fBigBellFont);
          this.ctx.fillString(s, x + xOff - 1, y + 1);
          _results.push(this.ctx.setFont(this.fNormalBellFont));
        } else if (this.fZoomY > MIN_ZOOM_TO_SHOW_BELLS) {
          if (row.getStrikeTime(j + 1) === row.getCorrectStrikeTime(j + 1)) {
            this.ctx.setFont(this.fBoldBellFont);
            this.ctx.fillString(s, x + xOff, y);
            _results.push(this.ctx.setFont(this.fNormalBellFont));
          } else {
            _results.push(this.ctx.fillString(s, x + xOff, y));
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    StrikingDisplay.prototype.calcEffectivePixelsPerMs = function(row) {
      if (row.isHandstroke()) {
        return this.fEffectivePixelsPerMs = this.fPixelsPerMs * this.fAvBackDuration / (row.getRowDuration() - row.getAveragedGap() * row.getHandstrokeGap());
      } else {
        return this.fEffectivePixelsPerMs = this.fPixelsPerMs * this.fAvBackDuration / row.getRowDuration();
      }
    };

    StrikingDisplay.prototype.strikeTimeToPixelX = function(row, strikeTime) {
      var t;
      t = row.getRowEndTime() - strikeTime;
      t *= this.fEffectivePixelsPerMs;
      return this.fRowRight - t;
    };

    StrikingDisplay.prototype.getRowColour = function(row, rowNumber) {
      var rowBackground;
      rowBackground = null;
      if (row.isHandstroke()) {
        if (row.isGood()) {
          rowBackground = BACKGROUND_HANDGOOD;
        } else if (row.isBad()) {
          rowBackground = BACKGROUND_HANDBAD;
        } else {
          rowBackground = BACKGROUND_HAND;
        }
      } else {
        if (row.isGood()) {
          rowBackground = BACKGROUND_BACKGOOD;
        } else if (row.isBad()) {
          rowBackground = BACKGROUND_BACKBAD;
        } else {
          rowBackground = BACKGROUND_BACK;
        }
      }
      return rowBackground;
    };

    StrikingDisplay.prototype.getPreferredSize = function() {
      var x, y;
      x = EXTRA_WIDTH + ROW_WIDTH + SPEED_WIDTH;
      if (!this.fRowsLoaded) {
        return {
          x: x,
          y: 800
        };
      }
      y = this.fHeightPerRow * (this.fData.getNRows() + 2);
      return {
        x: x,
        y: y
      };
    };

    return StrikingDisplay;

  })();

}).call(this);
