// Generated by CoffeeScript 1.12.7
(function() {
  cas.UIWindow = (function() {
    function UIWindow() {
      this.fBellStats = document.getElementById('bellStats');
      this.fInChangesOnly = true;
      this.fSelectedBell = 0;
      this.fDisplay = new cas.CSVDisplay();
    }

    UIWindow.prototype.loadRows = function(data) {
      this.fData = data;
      this.updateStats();
      return this.fDisplay.loadRows(this.fData);
    };

    UIWindow.prototype.updateStats = function() {
      this.updateBellStats();
      return this.updateTouchStats();
    };

    UIWindow.prototype.updateBellStats = function() {
      var s;
      if (this.fBellStats == null) {
        return;
      }
      s = this.getBellStats();
      return this.fBellStats.innerHTML = s;
    };

    UIWindow.prototype.updateTouchStats = function() {
      var s;
      if (this.fTouchStats == null) {
        return;
      }
      s = this.getTouchStats();
      return this.fTouchStats.innerHTML = s;
    };

    UIWindow.prototype.visualisationComplete = function() {};

    UIWindow.prototype.getTouchStats = function() {
      var avGap, discreteRMSE, faultPercentage, maxDuration, minDuration, nfaults, rowLengthSD, s, strikingRMSE;
      nfaults = 0;
      faultPercentage = 0;
      if (this.fData != null) {
        strikingRMSE = this.fData.getStrikingRMSE(this.fInChangesOnly);
        discreteRMSE = this.fData.getDiscreteStrikingRMSE(this.fInChangesOnly);
        rowLengthSD = this.fData.getRowLengthSD(this.fInChangesOnly);
        maxDuration = this.fData.getMaxDuration(this.fInChangesOnly);
        minDuration = this.fData.getMinDuration(this.fInChangesOnly);
        avGap = this.fData.getMeanInterbellGap(this.fInChangesOnly);
        nfaults = this.fData.getFaults(this.fInChangesOnly);
        faultPercentage = this.fData.getFaultPercentage(this.fInChangesOnly);
      }
      s = "";
      s += "<html><table>";
      s += "<tr><td><b></b></td><td>Whole</td><td>Hand</td><td>Back</td></tr>";
      this.rowHtml(s, cas.TouchStats.TEXT_STRIKING_RMSE, strikingRMSE);
      this.rowHtml(s, cas.TouchStats.TEXT_DISCRETE_RMSE, discreteRMSE);
      this.rowHtml(s, cas.TouchStats.TEXT_INTERVAL_MEAN, avGap);
      this.rowHtml(s, cas.TouchStats.TEXT_QUICKEST_ROW, minDuration);
      this.rowHtml(s, cas.TouchStats.TEXT_SLOWEST_ROW, maxDuration);
      this.rowHtml(s, cas.TouchStats.TEXT_ROW_LENGTH_SD, rowLengthSD);
      s += "<tr><td>";
      s += cas.TouchStats.TEXT_FAULTS;
      s += "</td><td>";
      s += nfaults;
      s += "</td><td>";
      s += this.toPercentage(faultPercentage);
      s += "</td><td></td></tr>";
      s += "</table></html>";
      return s;
    };

    UIWindow.prototype.getBellStats = function() {
      var bellLate, bellRMSE, bellSD, s;
      if ((this.fData != null) && this.fSelectedBell > 0) {
        bellSD = this.fData.getBellSD(this.fSelectedBell, this.fInChangesOnly);
        bellRMSE = this.fData.getBellRMSE(this.fSelectedBell, this.fInChangesOnly);
        bellLate = this.fData.getLateness(this.fSelectedBell, this.fInChangesOnly);
      }
      s = "<html><table>";
      s += "<tr><td><b>Selected:</b></td><td>";
      if (this.fSelectedBell > 0) {
        s += fSelectedBell;
      } else {
        s += "none";
      }
      s += "</td><td></td><td></td></tr>";
      s += "<tr><td><b></b></td><td>Whole</td><td>Hand</td><td>Back</td></tr>";
      this.rowHtml(s, cas.TouchStats.TEXT_RMSE, bellRMSE);
      this.rowHtml(s, cas.TouchStats.TEXT_SD, bellSD);
      this.rowHtml(s, cas.TouchStats.TEXT_AV_MS_LATE, bellLate);
      s += "</table></html>";
      return s;
    };

    UIWindow.prototype.rowHtml = function(s, rowTitle, stats) {
      s += "<tr><td>";
      s += rowTitle;
      s += "</td><td>";
      s += toMilliseconds(stats.whole);
      s += "</td><td>";
      s += toMilliseconds(stats.hand);
      s += "</td><td>";
      s += toMilliseconds(stats.back);
      return s += "</td></tr>";
    };

    UIWindow.prototype.setSelectedBell = function(bell) {
      this.fSelectedBell = bell;
      this.fDisplay.setHighlightedBell(bell);
      return this.updateBellStats();
    };

    return UIWindow;

  })();

}).call(this);
