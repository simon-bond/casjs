// Generated by CoffeeScript 1.7.1
(function() {
  cas.ExtraneousStrikeCorrector = (function() {
    ExtraneousStrikeCorrector.prototype.fNBells = 0;

    function ExtraneousStrikeCorrector() {
      this.fCurrentRow = new cas.RawRow(true);
      this.fNextRow = new cas.RawRow(false);
    }

    ExtraneousStrikeCorrector.prototype.receiveBong = function(bong) {
      var avSep, b1, b2, mySep1, mySep2, myTotalSep, nBellsInBothRows, p1, place1, place2, totalSep, _i, _len, _ref;
      place1 = this.fCurrentRow.findBell(bong.bell);
      place2 = this.fNextRow.findBell(bong.bell);
      if (this.fNextRow.getRowSize() === 0 && place1 < 0) {
        this.fCurrentRow.addBong(bong);
        return;
      }
      if (place2 < 0) {
        this.fNextRow.addBong(bong);
        return;
      }
      this.fNBells = Math.max(this.fNBells, this.fCurrentRow.getRowSize());
      nBellsInBothRows = 0;
      totalSep = 0;
      mySep1 = 0;
      mySep2 = 0;
      _ref = this.fNextRow.fBells;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        b2 = _ref[_i];
        p1 = this.fCurrentRow.findBell(b2.bell);
        if (p1 > 0) {
          b1 = this.fCurrentRow.getBong(p1);
          if (b2.bell === bong.bell) {
            mySep1 = b2.time - b1.time;
            mySep2 = bong.time - b2.time;
          } else {
            totalSep += b2.time - b1.time;
            nBellsInBothRows++;
          }
        }
      }
      avSep = 0;
      if (nBellsInBothRows > 0) {
        avSep = totalSep / nBellsInBothRows;
      }
      myTotalSep = mySep1 + mySep2;
      if (myTotalSep > 0 && myTotalSep < avSep * 1.2) {
        if (mySep1 < mySep) {
          this.fNextRow.removeBong(this.fNextRow.findBell(bong.bell));
          this.fNextRow.addBong(bong);
          return;
        } else if (mySep2 < avSep / 2) {
          return;
        }
      }
      this.finishRow();
      return this.fNextRow.addBong(bong);
    };

    ExtraneousStrikeCorrector.prototype.finishRow = function() {
      var bong, _i, _len, _ref;
      _ref = this.fCurrentRow.fBells;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        bong = _ref[_i];
        this.fNextStage.receiveBong(bong);
      }
      this.fCurrentRow = this.fNextRow;
      return this.fNextRow = new cas.RawRow(!this.fCurrentRow.isHandstroke());
    };

    ExtraneousStrikeCorrector.prototype.notifyInputComplete = function() {
      this.finishRow();
      this.finishRow();
      return this.fNextStage.notifyInputComplete();
    };

    ExtraneousStrikeCorrector.prototype.setNextStage = function(nextStage) {
      return this.fNextStage = nextStage;
    };

    return ExtraneousStrikeCorrector;

  })();

}).call(this);
