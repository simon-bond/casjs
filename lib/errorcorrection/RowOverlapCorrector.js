// Generated by CoffeeScript 1.7.1
(function() {
  cas.RowOverlapCorrector = (function() {
    var LOG_OUTPUT, MAX_OVERLAP;

    MAX_OVERLAP = 3;

    LOG_OUTPUT = false;

    RowOverlapCorrector.prototype.fNBells = 0;

    function RowOverlapCorrector() {
      this.fCurrentRow = new cas.RawRow(true);
      this.fNextRow = new cas.RawRow(false);
    }

    RowOverlapCorrector.prototype.receiveBong = function(bong) {
      var bongInNextRow, place1, place2;
      place1 = this.fCurrentRow.findBell(bong.bell);
      place2 = this.fNextRow.findBell(bong.bell);
      this.fNBells = Math.max(this.fNBells, this.fCurrentRow.getNBells());
      if (place1 < 0 && place2 > 0) {
        bongInNextRow = this.fNextRow.getBong(place2);
        if (bongInNextRow.time === this.fNextRow.getFirstStrikeTime()) {
          this.fNextRow.removeBong(place2);
          this.fCurrentRow.addBong(bongInNextRow);
          this.fNextRow.addBong(bong);
          return;
        }
      } else if (place1 < 0) {
        if (this.fNextRow.getRowSize() <= MAX_OVERLAP) {
          this.fCurrentRow.addBong(bong);
          return;
        }
      }
      if (place2 < 0) {
        this.fNextRow.addBong(bong);
        return;
      }
      this.finishRow();
      return this.fNextRow.addBong(bong);
    };

    RowOverlapCorrector.prototype.finishRow = function() {
      var bong, _i, _len, _ref;
      if (LOG_OUTPUT) {
        console.log("RowOverlapCorrector: " + fCurrentRow);
      }
      _ref = this.fCurrentRow.fBells;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        bong = _ref[_i];
        this.fNextStage.receiveBong(bong);
      }
      this.fCurrentRow = this.fNextRow;
      return this.fNextRow = new cas.RawRow(!this.fCurrentRow.isHandstroke());
    };

    RowOverlapCorrector.prototype.notifyInputComplete = function() {
      this.finishRow();
      this.finishRow();
      return this.fNextStage.notifyInputComplete();
    };

    RowOverlapCorrector.prototype.setNextStage = function(nextStage) {
      return this.fNextStage = nextStage;
    };

    return RowOverlapCorrector;

  })();

}).call(this);
