// Generated by CoffeeScript 1.7.1
(function() {
  cas.RawRow = (function() {
    RawRow.fNBells = 0;

    function RawRow(stroke) {
      this.fHandstroke = stroke;
      this.fBells = [];
    }

    RawRow.prototype.toString = function() {
      var i, s, _i, _ref;
      s = "";
      if (this.fBells.length === 0) {
        s = "Empty Row";
      } else {
        s += this.fBells[0].toString();
        for (i = _i = 1, _ref = this.fBells.length; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
          s += ", ";
          s += this.fBells[i].toString();
        }
      }
      return s;
    };

    RawRow.prototype.rowAsString = function() {
      var bong, i, s, _i, _ref, _results;
      s = "";
      if (this.fBells.length === 0) {
        return s = "Empty Row";
      } else {
        _results = [];
        for (i = _i = 0, _ref = this.fBells.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          bong = this.fBells[i];
          s += BELL_CHARS.charAt(bong.bell - 1);
          if ((bong.stroke === HANDSTROKE) !== this.fHandstroke) {
            _results.push(s += bong.stroke === HANDSTROKE ? "h" : "b");
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }
    };

    RawRow.prototype.getBong = function(place) {
      return this.fBells[place - 1];
    };

    RawRow.prototype.getBellAt = function(place) {
      return this.getBong(place).bell;
    };

    RawRow.prototype.getLastBong = function() {
      return this.fBells[this.getRowSize() - 1];
    };

    RawRow.prototype.removeBong = function(place) {
      return this.fBells.splice(place - 1, 1);
    };

    RawRow.prototype.removeLastBong = function() {
      return this.fBells.splice(this.getRowSize() - 1, 1);
    };

    RawRow.prototype.getStrikeTime = function(place) {
      return this.getBong(place).time;
    };

    RawRow.prototype.getFirstStrikeTime = function() {
      return this.getStrikeTime(1);
    };

    RawRow.prototype.getLastStrikeTime = function() {
      return this.getStrikeTime(this.getRowSize());
    };

    RawRow.prototype.findBell = function(bell) {
      var place, _i, _ref;
      for (place = _i = 1, _ref = this.fBells.size(); 1 <= _ref ? _i <= _ref : _i >= _ref; place = 1 <= _ref ? ++_i : --_i) {
        if (this.getBellAt(place) === bell) {
          return place;
        }
      }
      return -1;
    };

    RawRow.prototype.isHandstroke = function() {
      return fHandstroke;
    };

    RawRow.prototype.isMatchingStroke = function(bong) {
      if (this.isHandstroke()) {
        return bong.stroke === HANDSTROKE;
      } else {
        return bong.stroke === Bong.BACKSTROKE;
      }
    };

    RawRow.prototype.setHandstroke = function(handstroke) {
      return this.fHandstroke = handstroke;
    };

    RawRow.prototype.addBong = function(bong) {
      this.fBells.push(bong);
      return this.fNBells = Math.max(this.fNBells, bong.bell);
    };

    RawRow.prototype.addBongAtLead = function(bong) {
      this.fBells.unshift(bong);
      return this.fNBells = Math.max(this.fNBells, bong.bell);
    };

    RawRow.prototype.setBells = function(bells, first, last) {
      var i, _i, _results;
      _results = [];
      for (i = _i = first; first <= last ? _i < last : _i > last; i = first <= last ? ++_i : --_i) {
        _results.push(this.fBells.push(bells[i]));
      }
      return _results;
    };

    RawRow.prototype.getNBells = function() {
      return this.fNBells;
    };

    RawRow.prototype.getRowSize = function() {
      return this.fBells.length;
    };

    RawRow.prototype.isCloseToRounds = function() {
      var b1, b2, i, _i, _ref;
      b1 = this.getBellAt(1);
      for (i = _i = 2, _ref = this.getRowSize(); 2 <= _ref ? _i <= _ref : _i >= _ref; i = 2 <= _ref ? ++_i : --_i) {
        b2 = this.getBellAt(i);
        if (b1 > b2) {
          if (b1 - b2 > 1 || this.getBong(i).time - this.getBong(i - 1).time > 90) {
            return false;
          }
        }
        b1 = b2;
      }
      return true;
    };

    RawRow.prototype.getRowDuration = function() {
      return this.getBong(this.getRowSize()).time - this.getBong(1).time;
    };

    return RawRow;

  })();

}).call(this);
